// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for OrderStatus.
const (
	INVALID    OrderStatus = "INVALID"
	NEW        OrderStatus = "NEW"
	PROCESSED  OrderStatus = "PROCESSED"
	PROCESSING OrderStatus = "PROCESSING"
)

// Balance defines model for Balance.
type Balance struct {
	Current   float32 `json:"current"`
	Withdrawn float32 `json:"withdrawn"`
}

// Order defines model for Order.
type Order struct {
	Accrual    *float32    `json:"accrual,omitempty"`
	Number     string      `json:"number"`
	Status     OrderStatus `json:"status"`
	UploadedAt time.Time   `json:"uploaded_at"`
}

// OrderStatus defines model for Order.Status.
type OrderStatus string

// UserCredentials defines model for UserCredentials.
type UserCredentials struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// WithdrawRequest defines model for WithdrawRequest.
type WithdrawRequest struct {
	Order string  `json:"order"`
	Sum   float32 `json:"sum"`
}

// Withdrawal defines model for Withdrawal.
type Withdrawal struct {
	Order       string    `json:"order"`
	ProcessedAt time.Time `json:"processed_at"`
	Sum         float32   `json:"sum"`
}

// PostApiUserOrdersTextBody defines parameters for PostApiUserOrders.
type PostApiUserOrdersTextBody = string

// PostApiUserBalanceWithdrawJSONRequestBody defines body for PostApiUserBalanceWithdraw for application/json ContentType.
type PostApiUserBalanceWithdrawJSONRequestBody = WithdrawRequest

// PostApiUserLoginJSONRequestBody defines body for PostApiUserLogin for application/json ContentType.
type PostApiUserLoginJSONRequestBody = UserCredentials

// PostApiUserOrdersTextRequestBody defines body for PostApiUserOrders for text/plain ContentType.
type PostApiUserOrdersTextRequestBody = PostApiUserOrdersTextBody

// PostApiUserRegisterJSONRequestBody defines body for PostApiUserRegister for application/json ContentType.
type PostApiUserRegisterJSONRequestBody = UserCredentials

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение текущего баланса
	// (GET /api/user/balance)
	GetApiUserBalance(w http.ResponseWriter, r *http.Request)
	// Списание баллов с накопительного счёта
	// (POST /api/user/balance/withdraw)
	PostApiUserBalanceWithdraw(w http.ResponseWriter, r *http.Request)
	// Аутентификация пользователя
	// (POST /api/user/login)
	PostApiUserLogin(w http.ResponseWriter, r *http.Request)
	// Получение списка загруженных заказов
	// (GET /api/user/orders)
	GetApiUserOrders(w http.ResponseWriter, r *http.Request)
	// Загрузка номера заказа
	// (POST /api/user/orders)
	PostApiUserOrders(w http.ResponseWriter, r *http.Request)
	// Регистрация пользователя
	// (POST /api/user/register)
	PostApiUserRegister(w http.ResponseWriter, r *http.Request)
	// Получение информации о выводах средств
	// (GET /api/user/withdrawals)
	GetApiUserWithdrawals(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc = func(http.Handler) http.Handler

// GetApiUserBalance operation middleware
func (siw *ServerInterfaceWrapper) GetApiUserBalance(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiUserBalance(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiUserBalanceWithdraw operation middleware
func (siw *ServerInterfaceWrapper) PostApiUserBalanceWithdraw(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiUserBalanceWithdraw(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiUserLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiUserLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiUserLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiUserOrders operation middleware
func (siw *ServerInterfaceWrapper) GetApiUserOrders(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiUserOrders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiUserOrders operation middleware
func (siw *ServerInterfaceWrapper) PostApiUserOrders(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiUserOrders(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostApiUserRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiUserRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiUserWithdrawals operation middleware
func (siw *ServerInterfaceWrapper) GetApiUserWithdrawals(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiUserWithdrawals(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      map[string][]MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func Handler(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares["common"],
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		if middlewares, ok := options.Middlewares["GET /api/user/balance"]; ok && len(middlewares) > 0 {
			r.Use(middlewares...)
		}
		r.Get(options.BaseURL+"/api/user/balance", wrapper.GetApiUserBalance)
	})
	r.Group(func(r chi.Router) {
		if middlewares, ok := options.Middlewares["POST /api/user/balance/withdraw"]; ok && len(middlewares) > 0 {
			r.Use(middlewares...)
		}
		r.Post(options.BaseURL+"/api/user/balance/withdraw", wrapper.PostApiUserBalanceWithdraw)
	})
	r.Group(func(r chi.Router) {
		if middlewares, ok := options.Middlewares["POST /api/user/login"]; ok && len(middlewares) > 0 {
			r.Use(middlewares...)
		}
		r.Post(options.BaseURL+"/api/user/login", wrapper.PostApiUserLogin)
	})
	r.Group(func(r chi.Router) {
		if middlewares, ok := options.Middlewares["GET /api/user/orders"]; ok && len(middlewares) > 0 {
			r.Use(middlewares...)
		}
		r.Get(options.BaseURL+"/api/user/orders", wrapper.GetApiUserOrders)
	})
	r.Group(func(r chi.Router) {
		if middlewares, ok := options.Middlewares["POST /api/user/orders"]; ok && len(middlewares) > 0 {
			r.Use(middlewares...)
		}
		r.Post(options.BaseURL+"/api/user/orders", wrapper.PostApiUserOrders)
	})
	r.Group(func(r chi.Router) {
		if middlewares, ok := options.Middlewares["POST /api/user/register"]; ok && len(middlewares) > 0 {
			r.Use(middlewares...)
		}
		r.Post(options.BaseURL+"/api/user/register", wrapper.PostApiUserRegister)
	})
	r.Group(func(r chi.Router) {
		if middlewares, ok := options.Middlewares["GET /api/user/withdrawals"]; ok && len(middlewares) > 0 {
			r.Use(middlewares...)
		}
		r.Get(options.BaseURL+"/api/user/withdrawals", wrapper.GetApiUserWithdrawals)
	})

	return r
}
